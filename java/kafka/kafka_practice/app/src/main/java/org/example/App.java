/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.apache.kafka.clients.admin.AdminClient;
import org.apache.kafka.clients.admin.DescribeClusterResult;
import org.apache.kafka.clients.admin.ListTopicsResult;
import org.apache.kafka.common.KafkaFuture;
import org.apache.kafka.common.Node;

import javax.swing.*;
import java.util.Collection;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutionException;

public class App {
	public String getGreeting() {
		return "Hello World!";
	}

	public static void main(String[] args) throws ExecutionException, InterruptedException {
		System.out.println(new App().getGreeting());

		// Check Kafka broker status
		checkKafkaBrokerStatus("localhost:9092");
		WordcountService svc = new WordcountService();
		svc.produce();
		svc.consume();
	}

	public static void checkKafkaBrokerStatus(String bootstrapServers) {
		Properties props = new Properties();
		props.put("bootstrap.servers", bootstrapServers);

		try (AdminClient adminClient = AdminClient.create(props)) {
			System.out.println("Checking Kafka broker status for: " + bootstrapServers);

			// Get cluster information
			DescribeClusterResult clusterResult = adminClient.describeCluster();
			KafkaFuture<String> clusterIdFuture = clusterResult.clusterId();
			KafkaFuture<Node> controllerFuture = clusterResult.controller();
			KafkaFuture<Collection<Node>> nodesFuture = clusterResult.nodes();

			try {
				String clusterId = clusterIdFuture.get();
				Node controller = controllerFuture.get();
				Collection<Node> nodes = nodesFuture.get();

				System.out.println("Cluster ID: " + clusterId);
				System.out.println("Controller: " + controller);
				System.out.println("Number of brokers: " + nodes.size());

				// List topics
				ListTopicsResult topicsResult = adminClient.listTopics();
				Set<String> topicNames = topicsResult.names().get();
				System.out.println("Topics: " + topicNames);

				System.out.println("Kafka broker is running!");
			} catch (InterruptedException | ExecutionException e) {
				System.err.println("Failed to connect to Kafka broker: " + e.getMessage());
				e.printStackTrace();
			}
		}
	}
}
