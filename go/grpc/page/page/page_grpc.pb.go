// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: page/page.proto

package page

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PageServiceClient is the client API for PageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageServiceClient interface {
	GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (PageService_GetHeadClient, error)
	GetPage(ctx context.Context, opts ...grpc.CallOption) (PageService_GetPageClient, error)
	SetPage(ctx context.Context, opts ...grpc.CallOption) (PageService_SetPageClient, error)
}

type pageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageServiceClient(cc grpc.ClientConnInterface) PageServiceClient {
	return &pageServiceClient{cc}
}

func (c *pageServiceClient) GetHead(ctx context.Context, in *GetHeadRequest, opts ...grpc.CallOption) (PageService_GetHeadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PageService_ServiceDesc.Streams[0], "/page.PageService/GetHead", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceGetHeadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PageService_GetHeadClient interface {
	Recv() (*PageKey, error)
	grpc.ClientStream
}

type pageServiceGetHeadClient struct {
	grpc.ClientStream
}

func (x *pageServiceGetHeadClient) Recv() (*PageKey, error) {
	m := new(PageKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pageServiceClient) GetPage(ctx context.Context, opts ...grpc.CallOption) (PageService_GetPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PageService_ServiceDesc.Streams[1], "/page.PageService/GetPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceGetPageClient{stream}
	return x, nil
}

type PageService_GetPageClient interface {
	Send(*PageKey) error
	Recv() (*Page, error)
	grpc.ClientStream
}

type pageServiceGetPageClient struct {
	grpc.ClientStream
}

func (x *pageServiceGetPageClient) Send(m *PageKey) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pageServiceGetPageClient) Recv() (*Page, error) {
	m := new(Page)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pageServiceClient) SetPage(ctx context.Context, opts ...grpc.CallOption) (PageService_SetPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PageService_ServiceDesc.Streams[2], "/page.PageService/SetPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &pageServiceSetPageClient{stream}
	return x, nil
}

type PageService_SetPageClient interface {
	Send(*Page) error
	CloseAndRecv() (*PageKey, error)
	grpc.ClientStream
}

type pageServiceSetPageClient struct {
	grpc.ClientStream
}

func (x *pageServiceSetPageClient) Send(m *Page) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pageServiceSetPageClient) CloseAndRecv() (*PageKey, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PageKey)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageServiceServer is the server API for PageService service.
// All implementations must embed UnimplementedPageServiceServer
// for forward compatibility
type PageServiceServer interface {
	GetHead(*GetHeadRequest, PageService_GetHeadServer) error
	GetPage(PageService_GetPageServer) error
	SetPage(PageService_SetPageServer) error
	mustEmbedUnimplementedPageServiceServer()
}

// UnimplementedPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageServiceServer struct {
}

func (UnimplementedPageServiceServer) GetHead(*GetHeadRequest, PageService_GetHeadServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHead not implemented")
}
func (UnimplementedPageServiceServer) GetPage(PageService_GetPageServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedPageServiceServer) SetPage(PageService_SetPageServer) error {
	return status.Errorf(codes.Unimplemented, "method SetPage not implemented")
}
func (UnimplementedPageServiceServer) mustEmbedUnimplementedPageServiceServer() {}

// UnsafePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServiceServer will
// result in compilation errors.
type UnsafePageServiceServer interface {
	mustEmbedUnimplementedPageServiceServer()
}

func RegisterPageServiceServer(s grpc.ServiceRegistrar, srv PageServiceServer) {
	s.RegisterService(&PageService_ServiceDesc, srv)
}

func _PageService_GetHead_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHeadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PageServiceServer).GetHead(m, &pageServiceGetHeadServer{stream})
}

type PageService_GetHeadServer interface {
	Send(*PageKey) error
	grpc.ServerStream
}

type pageServiceGetHeadServer struct {
	grpc.ServerStream
}

func (x *pageServiceGetHeadServer) Send(m *PageKey) error {
	return x.ServerStream.SendMsg(m)
}

func _PageService_GetPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PageServiceServer).GetPage(&pageServiceGetPageServer{stream})
}

type PageService_GetPageServer interface {
	Send(*Page) error
	Recv() (*PageKey, error)
	grpc.ServerStream
}

type pageServiceGetPageServer struct {
	grpc.ServerStream
}

func (x *pageServiceGetPageServer) Send(m *Page) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pageServiceGetPageServer) Recv() (*PageKey, error) {
	m := new(PageKey)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PageService_SetPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PageServiceServer).SetPage(&pageServiceSetPageServer{stream})
}

type PageService_SetPageServer interface {
	SendAndClose(*PageKey) error
	Recv() (*Page, error)
	grpc.ServerStream
}

type pageServiceSetPageServer struct {
	grpc.ServerStream
}

func (x *pageServiceSetPageServer) SendAndClose(m *PageKey) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pageServiceSetPageServer) Recv() (*Page, error) {
	m := new(Page)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PageService_ServiceDesc is the grpc.ServiceDesc for PageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "page.PageService",
	HandlerType: (*PageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetHead",
			Handler:       _PageService_GetHead_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPage",
			Handler:       _PageService_GetPage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetPage",
			Handler:       _PageService_SetPage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "page/page.proto",
}
